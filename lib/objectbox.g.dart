// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/oscar_winner.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8232101523916932536),
    name: 'OscarWinner',
    lastPropertyId: const obx_int.IdUid(25, 7123548951000554098),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7275728714612782847),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7455885821653834255),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7807431662019575191),
        name: 'winner',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1156532430112520825),
        name: 'yearFilm',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3549273356804532246),
        name: 'yearCeremony',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5199642120994688846),
        name: 'ceremony',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3918805087392333084),
        name: 'canonCategory',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 2990807629759252016),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 1276799510603434446),
        name: 'film',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 9065276816368445123),
        name: 'domesticBoxOffice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7889856569597149015),
        name: 'foreignBoxOffice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 4549241106103580608),
        name: 'totalBoxOffice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 5025595018403474427),
        name: 'rottenTomatoesScore',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 1659455280275697151),
        name: 'filmId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 7335366323996467973),
        name: 'nominee',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 2384457465307268452),
        name: 'nomineeId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 1580252929127051397),
        name: 'detail',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 5256916226294806170),
        name: 'note',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 7123548951000554098),
        name: 'citation',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 2459203016213673531),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [2459203016213673531],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      2361008182485471480,
      1062957096206510594,
      4291117618097005060,
      762299298102777391,
      5497574396884656749,
      4225466359670389323,
      5560002609233068199,
      2535108734931614094,
      1848024226415554590,
      2610054348068455737,
      5276951054295564528,
      6476668758659571600,
      742653199524908846,
      4309456094107321767,
      118226070513743172,
      942789089363596214,
      5965706941566128832,
      7892643709656395772,
      1021907084338186177,
      2174972745671302170,
      8925436586396597208,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    OscarWinner: obx_int.EntityDefinition<OscarWinner>(
      model: _entities[0],
      toOneRelations: (OscarWinner object) => [],
      toManyRelations: (OscarWinner object) => {},
      getId: (OscarWinner object) => object.id,
      setId: (OscarWinner object, int id) {
        object.id = id;
      },
      objectToFB: (OscarWinner object, fb.Builder fbb) {
        final categoryOffset = fbb.writeString(object.category);
        final canonCategoryOffset = fbb.writeString(object.canonCategory);
        final nameOffset = fbb.writeString(object.name);
        final filmOffset = fbb.writeString(object.film);
        final filmIdOffset = fbb.writeString(object.filmId);
        final nomineeOffset = fbb.writeString(object.nominee);
        final nomineeIdOffset = fbb.writeString(object.nomineeId);
        final detailOffset = fbb.writeString(object.detail);
        final noteOffset = fbb.writeString(object.note);
        final citationOffset = fbb.writeString(object.citation);
        fbb.startTable(26);
        fbb.addInt64(0, object.id);
        fbb.addOffset(3, categoryOffset);
        fbb.addBool(4, object.winner);
        fbb.addInt64(8, object.yearFilm);
        fbb.addInt64(9, object.yearCeremony);
        fbb.addInt64(10, object.ceremony);
        fbb.addOffset(11, canonCategoryOffset);
        fbb.addOffset(12, nameOffset);
        fbb.addOffset(13, filmOffset);
        fbb.addFloat64(14, object.domesticBoxOffice);
        fbb.addFloat64(15, object.foreignBoxOffice);
        fbb.addFloat64(16, object.totalBoxOffice);
        fbb.addInt64(17, object.rottenTomatoesScore);
        fbb.addOffset(19, filmIdOffset);
        fbb.addOffset(20, nomineeOffset);
        fbb.addOffset(21, nomineeIdOffset);
        fbb.addOffset(22, detailOffset);
        fbb.addOffset(23, noteOffset);
        fbb.addOffset(24, citationOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final yearFilmParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final yearCeremonyParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final ceremonyParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final canonCategoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final filmParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final filmIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 42, '');
        final nomineeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 44, '');
        final nomineeIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 46, '');
        final winnerParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final detailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 48, '');
        final noteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 50, '');
        final citationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 52, '');
        final domesticBoxOfficeParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 32);
        final foreignBoxOfficeParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 34);
        final totalBoxOfficeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          36,
        );
        final rottenTomatoesScoreParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 38);
        final object = OscarWinner(
          yearFilm: yearFilmParam,
          yearCeremony: yearCeremonyParam,
          ceremony: ceremonyParam,
          category: categoryParam,
          canonCategory: canonCategoryParam,
          name: nameParam,
          film: filmParam,
          filmId: filmIdParam,
          nominee: nomineeParam,
          nomineeId: nomineeIdParam,
          winner: winnerParam,
          detail: detailParam,
          note: noteParam,
          citation: citationParam,
          domesticBoxOffice: domesticBoxOfficeParam,
          foreignBoxOffice: foreignBoxOfficeParam,
          totalBoxOffice: totalBoxOfficeParam,
          rottenTomatoesScore: rottenTomatoesScoreParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [OscarWinner] entity fields to define ObjectBox queries.
class OscarWinner_ {
  /// See [OscarWinner.id].
  static final id = obx.QueryIntegerProperty<OscarWinner>(
    _entities[0].properties[0],
  );

  /// See [OscarWinner.category].
  static final category = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[1],
  );

  /// See [OscarWinner.winner].
  static final winner = obx.QueryBooleanProperty<OscarWinner>(
    _entities[0].properties[2],
  );

  /// See [OscarWinner.yearFilm].
  static final yearFilm = obx.QueryIntegerProperty<OscarWinner>(
    _entities[0].properties[3],
  );

  /// See [OscarWinner.yearCeremony].
  static final yearCeremony = obx.QueryIntegerProperty<OscarWinner>(
    _entities[0].properties[4],
  );

  /// See [OscarWinner.ceremony].
  static final ceremony = obx.QueryIntegerProperty<OscarWinner>(
    _entities[0].properties[5],
  );

  /// See [OscarWinner.canonCategory].
  static final canonCategory = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[6],
  );

  /// See [OscarWinner.name].
  static final name = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[7],
  );

  /// See [OscarWinner.film].
  static final film = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[8],
  );

  /// See [OscarWinner.domesticBoxOffice].
  static final domesticBoxOffice = obx.QueryDoubleProperty<OscarWinner>(
    _entities[0].properties[9],
  );

  /// See [OscarWinner.foreignBoxOffice].
  static final foreignBoxOffice = obx.QueryDoubleProperty<OscarWinner>(
    _entities[0].properties[10],
  );

  /// See [OscarWinner.totalBoxOffice].
  static final totalBoxOffice = obx.QueryDoubleProperty<OscarWinner>(
    _entities[0].properties[11],
  );

  /// See [OscarWinner.rottenTomatoesScore].
  static final rottenTomatoesScore = obx.QueryIntegerProperty<OscarWinner>(
    _entities[0].properties[12],
  );

  /// See [OscarWinner.filmId].
  static final filmId = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[13],
  );

  /// See [OscarWinner.nominee].
  static final nominee = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[14],
  );

  /// See [OscarWinner.nomineeId].
  static final nomineeId = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[15],
  );

  /// See [OscarWinner.detail].
  static final detail = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[16],
  );

  /// See [OscarWinner.note].
  static final note = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[17],
  );

  /// See [OscarWinner.citation].
  static final citation = obx.QueryStringProperty<OscarWinner>(
    _entities[0].properties[18],
  );
}
